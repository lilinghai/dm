name: unit-integration

# Controls when the action will run. Triggers the workflow on pull request
# events but only for the master and release-* branch
on:
  pull_request:
    branches:
      - master
      - release-*

jobs:
  prepare:
    runs-on: ubuntu-18.04
    steps:
      # set up golang env, GOPATH="/home/runner/go"ï¼ŒGOMODCACHE="/home/runner/go/pkg/mod"
      - name: Set up Go 1.13
        uses: actions/setup-go@v2
        with:
          go-version: 1.13
      - name: Print Go version
        run: go version
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-dm-${{ hashFiles('**/go.sum') }}
      - name: Cache retool
        uses: actions/cache@v2
        with:
          path: |
            **/_tools
          key: ${{ runner.os }}-dm-retool-${{ hashFiles('**/_tools/manifest.json') }}
      # cache dm repo
      - name: Cache prepare results
        uses: actions/cache@v2
        with:
          path: /tmp/dm.tar.gz
          key: ${{ runner.os }}-dm-${{ github.event.pull_request.head.sha }}-master
      - name: DM Integration Test Build
        run: |
          make dm_integration_test_build
          curl http://download.pingcap.org/tidb-enterprise-tools-latest-linux-amd64.tar.gz | tar xz
          mv tidb-enterprise-tools-latest-linux-amd64/bin/sync_diff_inspector bin/
          mv tidb-enterprise-tools-latest-linux-amd64/bin/mydumper bin/
          rm -r tidb-enterprise-tools-latest-linux-amd64 || true
          id=$(docker create pingcap/tidb:nightly)
          docker cp $id:/tidb-server bin/
          tar czvf /tmp/dm.tar.gz .

#      - name: Upload dm build results
#        uses: actions/upload-artifact@v2
#        with:
#          name: dm-${{ github.event.pull_request.head.sha }}
#          path: dm.tar.gz

  unit_test:
    needs: prepare
    strategy:
      matrix:
        test_name: [relay, syncer, pkg_binlog, others]
    runs-on: ubuntu-18.04
    steps:
      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-dm-${{ hashFiles('**/go.sum') }}
      - name: Cache prepare results
        uses: actions/cache@v2
        with:
          path: /tmp/dm.tar.gz
          key: ${{ runner.os }}-dm-${{ github.event.pull_request.head.sha }}-master
#      - name: Download dm build results
#        uses: actions/download-artifact@v2
#        with:
#          name: dm-${{ github.event.pull_request.head.sha }}
      - name: Unit Test ${{ matrix.test_name }}
        run: |
          docker pull mysql:5.7
          docker run --name mysql-for-ut -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 --log-bin --binlog-format=ROW --enforce-gtid-consistency=ON --gtid-mode=ON --server-id=1
          set +e && for i in {1..90}; do mysqladmin ping -h127.0.0.1 -P 3306 -uroot --silent; if [ \$? -eq 0 ]; then set -e; break; else if [ \$i -eq 90 ]; then set -e; exit 2; fi; sleep 2; fi; done
          rm -rf /tmp/dm_test
          mkdir -p /tmp/dm_test
          export MYSQL_HOST=127.0.0.1
          export MYSQL_PORT=3306
          export MYSQL_PSWD=123456
          export PATH=~/go/bin:$PATH
          ls -lh /tmp/dm.tar.gz
          tar xzvf /tmp/dm.tar.gz
          make unit_test_${{ matrix.test_name }}
          rm -rf cov_dir
          mkdir -p cov_dir
          ls /tmp/dm_test
          cp /tmp/dm_test/cov*out cov_dir
          ls cov_dir
#      - name: Upload dm unit coverage
#        uses: actions/upload-artifact@v2
#        with:
#          name: dm-${{ github.event.pull_request.head.sha }}
#          path: dm.tar.gz
        # stash includes: "go/src/github.com/pingcap/dm/cov_dir/**", name: "unit-cov-${case_name}"

  integration_test:
    needs: prepare
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        test_name: [others, dmctl_basic]
#        test_name: [others, all_mode, dmctl_advance, dmctl_basic, dmctl_command, ha_cases, http_apis, import_goroutine_leak, incremental_mode, initial_unit, load_interrupt, online_ddl, print_status, relay_interrupt, safe_mode, sequence_safe_mode, sequence_sharding, shardddl1, shardddl2, shardddl3, sharding]
    steps:
      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-dm-${{ hashFiles('**/go.sum') }}
#      - name: Download dm build results
#        uses: actions/download-artifact@v2
#        with:
#          name: dm-${{ github.event.pull_request.head.sha }}
      - name: Cache prepare results
        uses: actions/cache@v2
        with:
          path: /tmp/dm.tar.gz
          key: ${{ runner.os }}-dm-${{ github.event.pull_request.head.sha }}-master
      - name: Integration Test ${{ matrix.test_name }}
        run: |
          docker pull mysql:5.7
          docker run --name mysql-for-ut -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 --log-bin --binlog-format=ROW --enforce-gtid-consistency=ON --gtid-mode=ON --server-id=1
          docker run --name mysql-for-ut2 -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 --log-bin --binlog-format=ROW --enforce-gtid-consistency=ON --gtid-mode=ON --server-id=1
          set +e && for i in {1..90}; do mysqladmin ping -h127.0.0.1 -P 3306 -p123456 -uroot --silent; if [ $? -eq 0 ]; then set -e; break; else if [ $i -eq 90 ]; then set -e; exit 2; fi; sleep 2; fi; done
          set +e && for i in {1..90}; do mysqladmin ping -h127.0.0.1 -P 3307 -p123456 -uroot --silent; if [ $? -eq 0 ]; then set -e; break; else if [ $i -eq 90 ]; then set -e; exit 2; fi; sleep 2; fi; done
          rm -rf /tmp/dm_test
          mkdir -p /tmp/dm_test
          export MYSQL_HOST1=127.0.0.1
          export MYSQL_PORT1=3306
          export MYSQL_HOST2=127.0.0.1
          export MYSQL_PORT2=3307
          export PATH=~/go/bin:$PATH
          ls -lh /tmp/dm.tar.gz
          tar xzvf /tmp/dm.tar.gz
          make integration_test CASE=${{ matrix.test_name }}
          rm -rf cov_dir
          mkdir -p cov_dir
          ls /tmp/dm_test
          cp /tmp/dm_test/cov*out cov_dir
          ls cov_idr
        # stash includes: "go/src/github.com/pingcap/dm/cov_dir/**", name: "integration-cov-${case_name}"

  check:
    needs: prepare
    runs-on: ubuntu-18.04
    steps:
      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-dm-${{ hashFiles('**/go.sum') }}
#      - name: Download dm build results
#        uses: actions/download-artifact@v2
#        with:
#          name: dm-${{ github.event.pull_request.head.sha }}
      - name: Cache prepare results
        uses: actions/cache@v2
        with:
          path: /tmp/dm.tar.gz
          key: ${{ runner.os }}-dm-${{ github.event.pull_request.head.sha }}-master
      - name: Check
        run: |
          export PATH=~/go/bin:$PATH
          tar xzvf /tmp/dm.tar.gz
          make check

  coverage:
    needs: [unit_test, integration_test, check]
    runs-on: ubuntu-18.04
    steps:
#      - name: Coverage
        # unstash 'dm'
          #            unstash 'unit-cov-relay'
          #            unstash 'unit-cov-syncer'
          #            unstash 'unit-cov-pkg_binlog'
          #            unstash 'unit-cov-others'
          #            unstash 'integration-cov-others'
          #            unstash 'integration-cov-all_mode'
          #            unstash 'integration-cov-dmctl_advance'
          #            unstash 'integration-cov-dmctl_basic'
          #            unstash 'integration-cov-dmctl_command'
          #            try {
          #                unstash 'integration-cov-ha_cases'
          #            } catch (Exception e) {
          #            }
          #            unstash 'integration-cov-http_apis'
          #            unstash 'integration-cov-import_goroutine_leak'
          #            unstash 'integration-cov-incremental_mode'
          #            unstash 'integration-cov-initial_unit'
          #            unstash 'integration-cov-load_interrupt'
          #            unstash 'integration-cov-online_ddl'
          #            unstash 'integration-cov-print_status'
          #            unstash 'integration-cov-relay_interrupt'
          #            unstash 'integration-cov-safe_mode'
          #            unstash 'integration-cov-sequence_safe_mode'
          #            unstash 'integration-cov-sequence_sharding'
          #            try {
          #                unstash 'integration-cov-shardddl1'
          #            } catch (Exception e) {
          #            }
          #            try {
          #                unstash 'integration-cov-shardddl2'
          #            } catch (Exception e) {
          #            }
          #            try {
          #                unstash 'integration-cov-shardddl3'
          #            } catch (Exception e) {
        #            }
        #            unstash 'integration-cov-sharding'
#        run: |
#          make check
#          rm -rf /tmp/dm_test
#          mkdir -p /tmp/dm_test
#          cp cov_dir/* /tmp/dm_test
#          set +x
#          BUILD_NUMBER=${BUILD_NUMBER} COVERALLS_TOKEN="${COVERALLS_TOKEN}" CODECOV_TOKEN="${CODECOV_TOKEN}" GOPATH=${ws}/go:\$GOPATH PATH=${ws}/go/bin:/go/bin:\$PATH JenkinsCI=1 make coverage || true
#          set -x

      # send Slack notify if failed.
#      - name: Slack notification
#        if: ${{ failure() }}
#        uses: Ilshidur/action-slack@2.1.0
#        env:
#          SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIFY }}
#        with:
#          args: "chaos job failed, see https://github.com/pingcap/dm/actions/runs/{{ GITHUB_RUN_ID }}"

      # Debug via SSH if previous steps failed
      - name: Set up tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v2

